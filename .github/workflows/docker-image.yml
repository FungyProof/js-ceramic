name: Push builds and restart services

on:
  push:
    branches: [ develop, release-candidate, master ]
  workflow_dispatch: # manually triggered

jobs:
  push_docker_images:
    name: Build and push
    runs-on: ubuntu-latest
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v2
      -
        name: Set branch name
        run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
      -
        name: Set sha tag
        run: |
          SHA_TAG=$(git rev-parse --short=12 "${{ github.sha }}")
          echo "SHA_TAG=$SHA_TAG" >> $GITHUB_ENV
      -
        name: Set master branch tag
        if: ${{ env.BRANCH == 'master' }}
        run: |
          echo "ENV=prod" >> $GITHUB_ENV
          echo "ENV_TAG=latest" >> $GITHUB_ENV
      -
        name: Set rc branch tag
        if: ${{ env.BRANCH == 'release-candidate' }}
        run: |
          echo "ENV=tnet" >> $GITHUB_ENV
          echo "ENV_TAG=tnet" >> $GITHUB_ENV
      -
        name: Set develop branch tag
        if: ${{ env.BRANCH == 'develop' }}
        run: |
          echo "ENV=dev" >> $GITHUB_ENV
          echo "ENV_TAG=dev" >> $GITHUB_ENV
      -
        name: Set env tag (default)
        if: ${{ env.ENV_TAG == '' }}
        run: |
          echo "ENV=dev" >> $GITHUB_ENV
          echo "ENV_TAG=dev" >> $GITHUB_ENV
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build js-ceramic image
        env:
          IMAGE_ID: "ceramicnetwork/js-ceramic"
        run: |
          docker buildx build . --file Dockerfile.daemon \
            --output "type=image,push=true" \
            --tag ${{ env.IMAGE_ID }}:${{ env.ENV_TAG }} \
            --tag ${{ env.IMAGE_ID }}:${{ env.SHA_TAG }} \
            --tag ${{ env.IMAGE_ID }}:${{ env.BRANCH }}
      -
        name: Build ipfs-daemon image
        env:
          IMAGE_ID: "ceramicnetwork/ipfs-daemon"
        run: |
          docker buildx build . --file Dockerfile.ipfs-daemon \
            --output "type=image,push=true" \
            --tag ${{ env.IMAGE_ID }}:${{ env.ENV_TAG }} \
            --tag ${{ env.IMAGE_ID }}:${{ env.SHA_TAG }} \
            --tag ${{ env.IMAGE_ID }}:${{ env.BRANCH }}

  update_services_by_restart:
    needs: push_docker_images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - instance: "IPFS Gateway"
            cluster: "ceramic-${{ env.ENV }}-ex"
            service: "ceramic-${{ env.ENV }}-ex-ipfs-gw"
            image: "ipfs-daemon"
          - instance: "IPFS Public node"
            cluster: "ceramic-${{ env.ENV }}-ex"
            service: "ceramic-${{ env.ENV }}-ex-ipfs-nd"
            image: "ipfs-daemon"
          - instance: "IPFS Private node"
            cluster: "ceramic-${{ env.ENV }}"
            service: "ceramic-${{ env.ENV }}-ipfs-nd"
            image: "ipfs-daemon"
          - instance: "Ceramic Gateway"
            cluster: "ceramic-${{ env.ENV }}-ex"
            service: "ceramic-${{ env.ENV }}-ex-gateway"
            image: "js-ceramic"
          - instance: "Ceramic Public node"
            cluster: "ceramic-${{ env.ENV }}-ex"
            service: "ceramic-${{ env.ENV }}-ex-node"
            image: "js-ceramic"
          - instance: "Ceramic Private node"
            cluster: "ceramic-${{ env.ENV }}"
            service: "ceramic-${{ env.ENV }}-node"
            image: "js-ceramic"

    steps:
      -
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      -
        name: Stop running tasks
        if: ${{ (github.event.inputs.environment != 'prod') || (matrix.instance != 'Ceramic Public node') }}
        run: |
            cd .github/workflows
            chmod +x stopTasks.sh
            ./stopTasks.sh ${{ matrix.cluster }} ${{ matrix.service }}
